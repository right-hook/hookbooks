Bundler.setup
require 'logger'
require 'right_hook/authenticator'
require 'right_hook/event'
require 'right_hook/logger'
require 'right_hook/subscriber'

desc 'Enable the hook for a given repo (authenticates with a commenter)'
task :enable_hook do
  RightHook.logger = Logger.new(STDOUT)
  base_url = ENV.fetch('RESPONDER_BASE_URL') { raise 'Must set RESPONDER_BASE_URL' }
  secret = ENV.fetch('RESPONDER_SECRET') { raise 'Must set RESPONDER_SECRET' }

  puts 'Who is the owner of the target repository? (e.g. octocat/Spoon-Knife => octocat)'
  owner = $stdin.gets.chomp
  puts 'What is the name of the target repository? (e.g. octocat/Spoon-Knife => Spoon-Knife)'
  repo_name = $stdin.gets.chomp
  puts 'What is the GitHub username for the responder bot?'
  username = $stdin.gets.chomp
  if ENV['RESPONDER_TOKEN'].to_s.size > 0
    token = ENV.fetch('RESPONDER_TOKEN').to_s
  else
    authenticator = RightHook::Authenticator.interactive_build(username)
    token = authenticator.find_or_create_authorization_by_note('Auth for Responder Hookbook')
    puts "Your token is: #{token}"
    puts "export RESPONDER_TOKEN=#{token} to skip entering a password next time."
  end

  subscriber = RightHook::Subscriber.new(
    base_url: base_url,
    oauth_token: token,
    owner: owner,
  )

  unless subscriber.subscribe(
    event_type: RightHook::Event::PULL_REQUEST,
    repo_name: repo_name,
    secret: secret
  )
    raise "Failed to subscribe to pull requests for #{owner}/#{repo_name} for account #{username}"
  end

  unless subscriber.subscribe(
    event_type: RightHook::Event::ISSUE,
    repo_name: repo_name,
    secret: secret
  )
    raise "Failed to subscribe to issues for #{owner}/#{repo_name} for account #{username}"
  end
end
